var sidebar = L.control.sidebar('sidebar', { autoPan: false, closeButton: false });
sidebar.addTo(map);
//Leaflet Search with OSM Geocode

var osmsearch = new L.Control.Search({
    url: 'https://nominatim.openstreetmap.org/search?format=json&q={s}',
    jsonpParam: 'json_callback',
    propertyName: 'display_name',
    propertyLoc: ['lat','lon'],
    circleLocation: false,
    autoType: false,
    autoCollapse: false,
    minLength: 2,
    zoom:13,
    textPlaceholder: 'Search Addresses',
    collapsed: false
  });
osmsearch.addTo(map);
var circle;
var marker;
osmsearch.on('search_locationfound', function(e) {
  osmsearch.collapse();
  if(marker){
    map.removeLayer(marker);
  }
  var name = e.display_name;
  marker = new L.marker([e.latlng.lat, e.latlng.lng], {icon: ovrdcMarker}).addTo(map);
});

//Toggle OSM Search and Feature Search - remove if no feature search
var hash = L.hash(map);
var gpsLocate = L.control.locate({follow: true, locateOptions: {enableHighAccuracy: true}});
//gpsLocate.addTo(map);
var homeExtent = L.control.defaultExtent({});
//homeExtent.addTo(map);
var fullscreen = L.control.fullscreen();

var globalsearchToggle = new L.easyButton({
    states: [{
      stateName: 'show',
      icon: 'fa-exchange fa-lg',
      title: 'Search Addresses',
      onClick: function(btn, map) {
        osmsearch.addTo(map);
      btn.state('hide');
        }
      },{
      stateName: 'hide',
    icon: 'fa-exchange fa-border fa-lg',
      title: 'Search Features',
      onClick: function(btn, map) {
        map.removeControl(osmsearch);
        btn.state('show');
      }
    }]
  });
//globalsearchToggle.addTo(map);

var sidebarToggle = L.easyButton({
      states: [{
              stateName: 'open-sidebar',   // name the state
              icon:      'fa-bars fa-lg',          // and define it's properties
              title:     'Show Sidebar', // like it's title
              onClick: function(btn, map) {  // and it's callback
                  sidebar.show();
                  btn.state('close-sidebar'); // change state on click!
              }
          }, {
              stateName: 'close-sidebar',
              icon:      'fa-times fa-2x',
              title:     'Hide Sidebar',
              onClick: function(btn, map) {
                  sidebar.hide();
                  btn.state('open-sidebar');
              }
      }],
    id: 'menu',
 });
var stogglebar = L.easyBar([sidebarToggle], {id: 'toggle'}).addTo(map);
var leafletprint = L.easyPrint();
//end toolbar
sidebar.on('hide', function () {
    sidebarToggle.state('open-sidebar');
});
sidebar.on('show', function () {
    sidebarToggle.state('close-sidebar');
});
//mobile toolbar menu
//--tools toggle on small screens
var toolshidden = false;
var mobilescreen = false;
var tools = L.easyButton({
      states: [{
              stateName: 'show-tools',   // name the state
              icon:      'fa-cogs fa-lg',          // and define it's properties
              title:     'Show Map Tools', // like it's title
              onClick: function(btn, map) {  // and it's callback
                  leafletprint.addTo(map);
                  gpsLocate.addTo(map);
                  homeExtent.addTo(map);
                  fullscreen.addTo(map);
                  
                  globalsearchToggle.addTo(map);
                  
                  btn.state('hide-tools'); // change state on click!
                  toolshidden = false;
                  //console.log(toolshidden + ' state changed to hideTools');
              }
          }, {
              stateName: 'hide-tools',
              icon:      'fa-cogs fa-border fa-lg',
              title:     'Hide Map Tools',
              onClick: function(btn, map) {
                  map.removeControl(leafletprint);
                  map.removeControl(gpsLocate);
                  map.removeControl(homeExtent);
                  map.removeControl(fullscreen);
                  
                  map.removeControl(globalsearchToggle);
                  
                  btn.state('show-tools');
                  toolshidden = true;
                  //console.log(toolshidden+ ' state changed to showTools');
              }
      }],
    id: 'tools',
 });
console.log('tools loaded');
var w = window.innerWidth;
console.log('screen width: ' + w);
if (w < 481) {
  tools.addTo(map);
  toolshidden = true;
  mobilescreen = true;
  //console.log('mobile tool toggle');
  //console.log(toolshidden + "mobilescreen: " + mobilescreen);
}else{
  leafletprint.addTo(map);
  gpsLocate.addTo(map);
  homeExtent.addTo(map);
  fullscreen.addTo(map);
  
  globalsearchToggle.addTo(map);
  
  toolshidden = false;
  //console.log(toolshidden + " " + mobilescreen);
}
window.onresize = function() {
  if ( toolshidden === true && window.innerWidth > 480 && mobilescreen === true) {
    leafletprint.addTo(map);
    gpsLocate.addTo(map);
    homeExtent.addTo(map);
    fullscreen.addTo(map);
    
    globalsearchToggle.addTo(map);
    
    map.removeControl(tools);
    toolshidden = false;
    mobilescreen = false;
    //console.log(toolshidden + " " + mobilescreen);
  }
  else if ( toolshidden === false && mobilescreen === true && window.innerWidth > 481) {
    tools.state('show-tools');
    mobilescreen = false;
    map.removeControl(tools);
    //console.log(toolshidden + "" + mobilescreen);
  }
  else if ( toolshidden === false && window.innerWidth < 481 && mobilescreen === false) {
    map.removeControl(leafletprint);
    map.removeControl(gpsLocate);
    map.removeControl(homeExtent);
    map.removeControl(fullscreen);
    
    map.removeControl(globalsearchToggle);
    
    tools.addTo(map);
    toolshidden = true;
    mobilescreen = true;
    //console.log(toolshidden + " " + mobilescreen);
  }
  else {}
};
//--end tools toggle

//Close Layer Control on Layer Change
//Close Layer Control on Layer Change on mobile
map.on('baselayerchange', function() {
 if (L.Browser.mobile) {
   map.on('baselayerchange', function() {
     setTimeout(function() {
       $(".leaflet-control-layers").removeClass("leaflet-control-layers-expanded");
     },5000);
   });
 }
});
//end mobile tools menu
var loading = L.Control.loading({position:'topright'}).addTo(map);
//end OVRDC Modern UI Toolbar

/*var customZoom = L.control.zoom({position:'topleft'}).addTo(map);
sidebar.on('show', function() {
	map.removeControl(customZoom)
});
sidebar.on('hide', function() {
	customZoom.addTo(map);
});*/
/*function AlertIt() {
var answer = confirm ("Please click on OK to continue.")
if (answer)
window.location="http://www.continue.com";
};
var ovrdc = L.geoJson();
ovrdc.getAttribution = function() {
  return '<a href="javascript:AlertIt();">About this Map</a> '
};
ovrdc.addTo(map);*/

cdblight.addTo(map);
//styles
var selected = {
  fillColor: 'red'
};
var style = {
  color: '#fff',
  fillColor: '#337ab7',
  fillOpacity: 0.7,
  size: 7
}
//Data
var ovrdc = L.geoJson.ajax('assets/data/ovrdcboundary.geojson', {
  pointerEvents: 'none',
  style: {
    color: 'lightgray',
    weight: 3,
    opacity: 1,
    dashArray: '3',
    fillOpacity: 0
  }
}).addTo(map);
var outline = L.geoJson.ajax('assets/data/rtpo/port-outline.geojson', {
  pointerEvents: 'none',
  style: {
    color: 'red',
    weight: 3,
    opacity: 0.4,
    dashArray: '3',
    fillOpacity: 0
  }
});
outline.on('data:loaded', function() {
  map.fitBounds(outline.getBounds())
});
function info(e) {
  var layer = e.target;
  var lineinfo = "";
  for (var k in layer.feature.properties) {
    var v = String(layer.feature.properties[k]);
    lineinfo += '<b>' + k + '</b><br>' + v + '<br>' + '<hr style="margin:5px 0px;">';
  };
  mapinfo.innerHTML = lineinfo;
  ports.setStyle(style);
  layer.setStyle(selected);
  sidebar.show();
  sidebarToggle.state('close-sidebar');
};

function updateinfo(feaure, layer) {
  layer.on({
    click: info,
    mouseover: info
  })
};
var ports = new L.geoJson.ajax('https://www.ovrdc.org/apps/assets/data/rtpo/ports.geojson', {
  style: style,
  pointToLayer: function(feature, latlng) {
    return new L.CircleMarker(latlng, {radius: 6, fillOpactiy: 0.9});
  },
  onEachFeature: updateinfo
});
var portCluster = new L.markerClusterGroup({
  disableClusteringAtZoom: 15
}).addTo(map);
ports.on('data:loaded', function() {
  portCluster.addLayer(ports);
  outline.addTo(map);
});
map.on('click', function() {
  sidebar.hide();
  ports.setStyle(style);
});
//Feature search
var search = new L.Control.Search({
  layer: ports,
  initial: false,
  propertyName: 'name',
  circleLocation:false,
  collapsed:false,
  textPlaceholder:'Search Port Names',
  zoom:'15'});
search.on('search_locationfound', function() { map.setZoom(18); });
search.on ('search_locationfound', function(e) {
    e.layer.fire('click');
    search.collapse();
  });
map.addControl(search);